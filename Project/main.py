# Данная программа предназначена для расчета площади покрытия металлоконструкций стандартного профиля


import tkinter as tk
from tkinter import ttk
from tkinter import messagebox as mb
import re
from PIL import Image, ImageTk
from tktooltip import ToolTip
import tkinter.filedialog as fd
import os

# Основные параметры окна
w = tk.Tk()
w.geometry("835x500+300+200")
w.title('    Калькулятор площади поверхности металла')
w.resizable(False, True)

# Основные параметры меню
my_menu = tk.Menu(w)

# Стили
font_arial = "Arial 10 bold"
font_about_program = "Times 14"
color_1 = '#dedbd8'
w['bg'] = color_1
s = ttk.Style()
s.theme_use('xpnative')
# Создаем папку "Расчеты" для хранения расчетов. Если папка уже создана, то условие пропускает
if not os.path.isdir("Расчеты"):
    os.mkdir("Расчеты")

# Иконка на окне программы
photo = tk.PhotoImage(file='calculator.png')
w.iconphoto(False, photo)


def closing():
    if count > 1:
        if mb.askokcancel("Внимание", "Вы уверены, что хотите выйти из программы?\nДанный расчет не будет сохранен"):
            w.destroy()
    else:
        w.destroy()


def create_frame():
    """Создаем фрейм (рамку), в которую помещаем все виджеты"""
    global frame
    frame = tk.Frame(w, bg=color_1)
    frame.grid(row=0, column=0, rowspan=count + 1, columnspan=7)


def delete():
    """Удаляем фрейм, обнуляем все данные, создаем заново все блоки"""
    global count, massive, massive_value
    mb_delete = mb.askquestion("Информация", "Сохранить текущий расчет?")
    if mb_delete == "yes":
        save_as()
    else:
        count = 0
        massive.clear()
        massive_value.clear()
        frame.destroy()
        create_frame()
        create_label()
        create_combobox()
        create_button_add()
        create_button_stop()


# Функции к меню
def about_program():
    """Создаем новое окно для справки - О программе"""
    w_pr = tk.Tk()
    w_pr.geometry("600x500+300+200")
    w_pr.title('    О программе')
    w_pr.resizable(False, False)

    t = f"\n1. ОБЩИЕ СВЕДЕНИЯ\n" \
        "\nДанный калькулятор создан для расчета площади поверхности " \
        "элементов в зависимости от сечения, длины и количества. В роли элементов выступают поверхности " \
        "листового проката, круглого сечения, квадратного и прямоугольного сечения, в виде двутавра, " \
        "швеллера и уголка. Сечение элементов взято из актуальных нормативных источников. Данную программу " \
        "можно использовать для подсчета площади огнезащиты металла, объема для очистки поверхности " \
        "металла от ржавчины, обработки (грунтовки, покраски) поверхности металла. Зная расход покрытия " \
        "на 1 кв.м. можно вычислить необходимый объем покрытия.\n" \
        "\n2. ИСТОЧНИКИ\n" \
        "\nДля составления данного калькулятора использовались следующие нормативные источники:" \
        "\n - ГОСТ 19903-2015 Прокат листовой горячекатаный." \
        "\n - ГОСТ 10704-91 Трубы стальные электросварные прямошовные." \
        "\n - ГОСТ 8732-78 Трубы стальные бесшовные горячедеформированные." \
        "\n - ГОСТ 2591-2006 Прокат сортовой стальной горячекатаный квадратный." \
        "\n - ГОСТ 30245-2003 Профили стальные гнутые замкнутые сварные квадратные и прямоугольные для " \
        "строительных конструкций." \
        "\n - ГОСТ 8509-93 Уголки стальные горячекатаные равнополочные." \
        "\n - ГОСТ 8510-86 Уголки стальные горячекатаные неравнополочные." \
        "\n - ГОСТ Р 57837-2017 Двутавры стальные горячекатаные с параллельными гранями полок." \
        "\n - ГОСТ 8240-97 Швеллеры стальные горячекатаные.\n" \
        "\n3. ВХОДНЫЕ ДАННЫЕ\n" \
        "\nВ столбцах «Сечение», «Профиль» и «Размер» выберите нужную позицию. В столбце «Количество» " \
        "укажите количество элементов, значение должно быть целым положительным числом. В столбце «Длина» " \
        "укажите общую длину элементов. Допускается следующий формат ввода данных:\n" \
        "\n1, 2, 3, …" \
        "\n1 2 3 …" \
        "\n1 + 2 + 3 + …" \
        "\n1 / 2 / 3 / …\n" \
        "\nдля позиции «Лист»:\n" \
        "\n1 х 2 х 3 – [ширина] х [длина] х [высота]\n" \
        "\n4. ВЫХОДНЫЕ ДАННЫЕ\n" \
        "\nНа основании полученных (введенных и выбранных) данных <b>программа</b> считает площадь поверхности " \
        "элементов и выводит в отдельную графу. При нажатии «Добавить позицию» графа будет обновляться, " \
        "суммируя всю площадь.\n" \
        "\n5. ФУНКЦИОНАЛЬНЫЕ ВОЗМОЖНОСТИ\n" \
        "\n1) Возможность добавлять несколько позиций в одном расчете. Осуществляется при нажатии на " \
        "кнопку «Добавить позицию». " \
        "\n2) Возможность удаления строки, а также ее восстановления. " \
        "\n3) Ввод данных длины элемента различными способами. " \
        "\n4) Копирование итоговой площади в буфер обмена." \
        "\n5) Подсказки при наведении на некоторые объекты." \
        "\n6) Функциональное меню (сохранение текущего расчета, создание нового расчета).\n" \
        "\n5.1. СОХРАНЕНИЕ\n" \
        "\nПри нажатии «Сохранить» расчет сохранится в отдельный файл формата .txt с именем «Расчет.txt». " \
        "Месторасположение файла – в текущей директории программы. При нажатии «Сохранить как…» откроется окно, " \
        "в котором необходимо выбрать директорию и наименование сохраняемого файла с расчетом. " \
        "\nПримечание: для сохранения текущего расчета необходимо закончить расчет нажатием на кнопку «Закончить». " \
        "В ином случае, будет показано всплывающее окно с указанием данного примечания. \nСохраняемый расчет " \
        "имеет данные по № позиции, сечение и профиль элемента, суммарная введенная длина и количество, " \
        "площадь поверхности на каждую позицию и суммарная площадь.\n" \
        "\n5.2. НОВЫЙ РАСЧЕТ\n" \
        "\nЧтобы начать или создать новый расчет, вы можете нажать «Новый расчет» в меню. " \
        "Прежний расчет не будет сохранен.\n" \
        "\n6. АВТОРЫ\n" \
        "\nПочта для связи, ваши предложения: aleksandr.ar.n@yandex.ru. " \
        "\nВ случае обнаружения ошибок, прошу написать на почту.\n\n"

    frame_help = tk.Frame(w_pr)
    sb = ttk.Scrollbar(w_pr, orient=tk.VERTICAL)
    sb.grid(row=0, column=1, sticky="ns")
    text_box = tk.Text(w_pr,
                       wrap='word',
                       font=font_about_program,
                       width=63,
                       height=23,
                       relief=tk.FLAT)
    text_box.insert(tk.END, t)
    text_box.configure(state=tk.DISABLED)
    text_box.config(yscrollcommand=sb.set)
    sb.config(command=text_box.yview)

    text_box.grid(row=0, column=0, padx=5, pady=5)
    text_box.bind("<Key>", lambda event: "break")
    text_box.bind("<Button>", lambda event: "break")

    frame_help.grid()

    w_pr.mainloop()


def save():
    global new_file, button_stop
    if button_stop["state"] == "normal":
        mb.showerror(title='Ошибка', message='Для сохранения необходимо закончить текущий расчет, '
                                             'нажав на кнопку "Посчитать"!')
    else:
        new_file = open("Расчеты/Расчет.txt", "w", encoding="UTF-8")
        save_all_data()
        new_file.write(save_all)
        new_file.close()
        mb.showinfo(title='Информация', message='Ваш расчет успешно сохранен!')


def save_as():
    global new_file, button_stop
    if button_stop["state"] == "normal":
        mb.showerror(title='Ошибка', message='Для сохранения необходимо закончить текущий расчет, '
                                             'нажав на кнопку "Посчитать"!')
    else:
        new_file = fd.asksaveasfile(title="Сохранить файл", defaultextension=".txt",
                                    filetypes=(("Текстовый файл", "*.txt"),))
        save_all_data()
        new_file.write(save_all)
        new_file.close()
        mb.showinfo(title='Информация', message='Ваш расчет успешно сохранен!')


def save_all_data():
    global new_file, save_all
    if new_file:
        k = int(len(massive) / 5)
        p = "   " if k <= 9 else "    "  # делаем красивую табуляцию в конечном файле
        for i in range(k):
            n = " " if i < 10 else "  "
            if massive[(i * 5) + 2] == "Лист":
                save_all += f'{i + 1}){n}Сечение: {massive[(i * 5) + 2]}\n' \
                            f'{p}Размеры: {metal_sheet.pop(0)} м\n' \
                            f'{p}Количество: {massive[(i * 5) + 1]} шт.\n' \
                            f'{p}Площадь: {squares[i]} кв.м.\n'
            elif massive[(i * 5) + 2] == "Круг" \
                    or massive[(i * 5) + 2] == "Квадрат" \
                    or massive[(i * 5) + 2] == "Прямоугольник":
                save_all += f'{i + 1}){n}Сечение: {massive[(i * 5) + 2]}\n' \
                            f'{p}Размер: {massive[(i * 5) + 4]}\n' \
                            f'{p}Длина: {massive[i * 5]} м\n' \
                            f'{p}Количество: {massive[(i * 5) + 1]} шт.\n' \
                            f'{p}Площадь {squares[i]} кв.м.\n'
            else:
                save_all += f'{i + 1}){n}Сечение: {massive[(i * 5) + 2]}\n' \
                            f'{p}Профиль: {massive[(i * 5) + 3]}\n' \
                            f'{p}Размер: {massive[(i * 5) + 4]}\n' \
                            f'{p}Длина: {massive[i * 5]} м\n' \
                            f'{p}Количество: {massive[(i * 5) + 1]} шт.\n' \
                            f'{p}Площадь {squares[i]} кв.м.\n'
        save_all += f'\nОБЩАЯ ПЛОЩАДЬ: {round(sum_end, 2)} кв.м.'

    return save_all


# Создание меню
file_menu = tk.Menu(my_menu, tearoff=0)
file_menu.add_command(label="Новый расчет",
                      background='white',
                      foreground='black',
                      activeforeground='black',
                      activebackground='#bab8b7',
                      command=delete)
file_menu.add_command(label="Сохранить",
                      background='white',
                      foreground='black',
                      activeforeground='black',
                      activebackground='#bab8b7',
                      command=save)
file_menu.add_command(label="Сохранить как...",
                      background='white',
                      foreground='black',
                      activeforeground='black',
                      activebackground='#bab8b7',
                      command=save_as)
file_menu.add_command(label="Выход",
                      background='white',
                      foreground='black',
                      activeforeground='black',
                      activebackground='#bab8b7',
                      command=closing)

help_menu = tk.Menu(my_menu, tearoff=0)

help_menu.add_command(label="О программе",
                      background='white',
                      foreground='black',
                      activeforeground='black',
                      activebackground='#bab8b7',
                      command=about_program)

my_menu.add_cascade(label="Файл", menu=file_menu)
my_menu.add_cascade(label="Справка", menu=help_menu)

w.config(menu=my_menu)

# Иконка для кнопки <Удалить/Восстановить>
image_delete = Image.open("icon_delete.png")
image_remove = Image.open("icon_remove.png")

resize_image_delete = image_delete.resize((20, 20))
resize_image_remove = image_remove.resize((20, 20))

img_delete = ImageTk.PhotoImage(resize_image_delete)
img_remove = ImageTk.PhotoImage(resize_image_remove)

# Переменные:
count = 0  # определяет количество позиций на экране
massive = []  # список, содержащий данные, считывающиеся из виджетов
massive_value = []  # список, содержащий копию элементов Entry (используется для восстановления данных)
squares = []  # список, содержащий площади строк
save_all = ""
metal_sheet = []
sum_end = 0  # итоговая сумма площади (в кв.м.)
delimiters = " / ", "  +  ", " +  ", "  + ", " + ", " +", "+ ", \
             " , ", ",  ", ", ", "  ", " ", "/ ", "/", "+", \
             " x ", " X ", "x ", "X ", " x", " X", "x", "X", \
             " х ", " Х ", "х ", "Х ", " х", " Х", "х", "Х"
regexPattern = '|'.join(map(re.escape, delimiters))  # сортировка delimiters по формату для split

# Заголовок
positions = [" Сечение:", " Профиль:", " Размер:", " Длина (м):", " Кол-во (шт):"]

# Сортамент
sort = ("Лист", "Круг", "Квадрат", "Прямоугольник", "Уголок", "Швеллер", "Двутавр")

# Круг
kr = ["d10", 3.14 * 0.01,
      "d10,2", 3.14 * 0.01,
      "d12", 3.14 * 0.012,
      "d13", 3.14 * 0.013,
      "d14", 3.14 * 0.014,
      "d15", 3.14 * 0.015,
      "d16", 3.14 * 0.016,
      "d17", 3.14 * 0.017,
      "d18", 3.14 * 0.018,
      "d19", 3.14 * 0.019,
      "d20", 3.14 * 0.02,
      "d21", 3.14 * 0.021,
      "d21,3", 3.14 * 0.021,
      "d22", 3.14 * 0.022,
      "d23", 3.14 * 0.023,
      "d25", 3.14 * 0.025,
      "d26", 3.14 * 0.026,
      "d27", 3.14 * 0.027,
      "d28", 3.14 * 0.028,
      "d30", 3.14 * 0.03,
      "d32", 3.14 * 0.032,
      "d33", 3.14 * 0.033,
      "d33,7", 3.14 * 0.034,
      "d35", 3.14 * 0.035,
      "d36", 3.14 * 0.036,
      "d38", 3.14 * 0.038,
      "d40", 3.14 * 0.04,
      "d42", 3.14 * 0.042,
      "d43", 3.14 * 0.043,
      "d44,5", 3.14 * 0.045,
      "d45", 3.14 * 0.045,
      "d48", 3.14 * 0.048,
      "d48,3", 3.14 * 0.048,
      "d51", 3.14 * 0.051,
      "d52", 3.14 * 0.052,
      "d53", 3.14 * 0.053,
      "d54", 3.14 * 0.054,
      "d57", 3.14 * 0.057,
      "d60", 3.14 * 0.06,
      "d63,5", 3.14 * 0.064,
      "d70", 3.14 * 0.07,
      "d73", 3.14 * 0.073,
      "d76", 3.14 * 0.076,
      "d83", 3.14 * 0.083,
      "d89", 3.14 * 0.089,
      "d95", 3.14 * 0.095,
      "d102", 3.14 * 0.102,
      "d108", 3.14 * 0.108,
      "d114", 3.14 * 0.114,
      "d127", 3.14 * 0.127,
      "d133", 3.14 * 0.133,
      "d140", 3.14 * 0.14,
      "d146", 3.14 * 0.146,
      "d152", 3.14 * 0.152,
      "d159", 3.14 * 0.159,
      "d168", 3.14 * 0.168,
      "d177,8", 3.14 * 0.178,
      "d180", 3.14 * 0.18,
      "d193,7", 3.14 * 0.194,
      "d219", 3.14 * 0.219,
      "d244,5", 3.14 * 0.245,
      "d273", 3.14 * 0.273,
      "d325", 3.14 * 0.325,
      "d355,6", 3.14 * 0.356,
      "d377", 3.14 * 0.377,
      "d406,4", 3.14 * 0.406,
      "d426", 3.14 * 0.426,
      "d508", 3.14 * 0.508,
      "d530", 3.14 * 0.53,
      "d630", 3.14 * 0.63,
      "d720", 3.14 * 0.72,
      "d820", 3.14 * 0.82,
      "d920", 3.14 * 0.92,
      "d1020", 3.14 * 1.02,
      "d1120", 3.14 * 1.12,
      "d1220", 3.14 * 1.22,
      "d1420", 3.14 * 1.42]

# Квадрат
kv = ["6x6", 0.024,
      "7x7", 0.028,
      "8x8", 0.032,
      "9x9", 0.036,
      "10x10", 0.04,
      "11x11", 0.044,
      "12x12", 0.048,
      "13x13", 0.052,
      "14x14", 0.056,
      "15x15", 0.06,
      "16x16", 0.064,
      "17x17", 0.068,
      "18x18", 0.072,
      "19x19", 0.076,
      "20x20", 0.08,
      "21x21", 0.084,
      "22x22", 0.088,
      "23x23", 0.092,
      "24x24", 0.096,
      "25x25", 0.1,
      "26x26", 0.104,
      "27x27", 0.108,
      "28x28", 0.112,
      "29x29", 0.116,
      "30x30", 0.12,
      "32x32", 0.128,
      "34x34", 0.136,
      "35x35", 0.14,
      "36x36", 0.144,
      "38x38", 0.152,
      "40x40", 0.16,
      "42x42", 0.168,
      "45x45", 0.18,
      "46x46", 0.184,
      "48x48", 0.192,
      "50x50", 0.2,
      "52x52", 0.208,
      "55x55", 0.22,
      "58x58", 0.232,
      "60x60", 0.24,
      "63x63", 0.252,
      "65x65", 0.26,
      "70x70", 0.28,
      "75x75", 0.3,
      "80x80", 0.32,
      "85x85", 0.34,
      "90x90", 0.36,
      "93x93", 0.372,
      "95x95", 0.38,
      "100x100", 0.4,
      "105x105", 0.42,
      "110x110", 0.44,
      "115x115", 0.46,
      "120x120", 0.48,
      "125x125", 0.5,
      "130x130", 0.52,
      "135x135", 0.54,
      "140x140", 0.56,
      "145x145", 0.58,
      "150x150", 0.6,
      "160x160", 0.64,
      "170x170", 0.68,
      "180x180", 0.72,
      "190x190", 0.76,
      "200x200", 0.8,
      "250x250", 1,
      "300x300", 1.2]

# Прямоугольник
pr = ["15x10", 0.05,
      "20x10", 0.06,
      "20x15", 0.07,
      "25x10", 0.07,
      "25x15", 0.08,
      "28x25", 0.106,
      "30x10", 0.08,
      "30x15", 0.09,
      "30x20", 0.1,
      "35x15", 0.1,
      "35x20", 0.11,
      "35x25", 0.12,
      "35x30", 0.13,
      "40x15", 0.11,
      "40x20", 0.12,
      "40x25", 0.13,
      "40x28", 0.136,
      "40x30", 0.14,
      "42x20", 0.124,
      "42x30", 0.144,
      "50x25", 0.15,
      "50x30", 0.16,
      "50x35", 0.17,
      "50x40", 0.18,
      "60x20", 0.16,
      "60x25", 0.17,
      "60x30", 0.18,
      "60x40", 0.2,
      "70x30", 0.2,
      "70x40", 0.22,
      "70x50", 0.26,
      "80x40", 0.24,
      "80x50", 0.26,
      "80x60", 0.28,
      "80x70", 0.3,
      "90x40", 0.26,
      "90x50", 0.28,
      "90x60", 0.3,
      "100x40", 0.28,
      "100x50", 0.3,
      "100x60", 0.32,
      "100x70", 0.34,
      "110x40", 0.3,
      "110x50", 0.32,
      "110x60", 0.34,
      "120x40", 0.32,
      "120x60", 0.36,
      "120x80", 0.4,
      "140x60", 0.4,
      "140x80", 0.44,
      "140x100", 0.48,
      "140x120", 0.52,
      "150x60", 0.42,
      "150x80", 0.46,
      "150x100", 0.5,
      "160x40", 0.4,
      "160x80", 0.48,
      "160x100", 0.52,
      "160x120", 0.56,
      "160x130", 0.58,
      "160x140", 0.6,
      "180x60", 0.48,
      "180x80", 0.52,
      "180x100", 0.56,
      "180x140", 0.64,
      "180x145", 0.65,
      "180x150", 0.66,
      "190x120", 0.62,
      "196x170", 0.74,
      "200x40", 0.48,
      "200x80", 0.56,
      "200x100", 0.6,
      "200x120", 0.64,
      "200x160", 0.72,
      "220x100", 0.64,
      "220x140", 0.72,
      "230x100", 0.66,
      "240x120", 0.72,
      "240x160", 0.8,
      "250x150", 0.8,
      "260x130", 0.78,
      "300x100", 0.8,
      "300x200", 1,
      "320x180", 1,
      "350x250", 1.2,
      "350x300", 1.3,
      "380x220", 1.2,
      "400x200", 1.2]

# Уголок
ug = ["Равнополочный", ["20х20", 4 * 0.02,
                        "25x25", 4 * 0.025,
                        "28x28", 4 * 0.028,
                        "30x30", 4 * 0.03,
                        "32x32", 4 * 0.032,
                        "35x35", 4 * 0.035,
                        "40x40", 4 * 0.04,
                        "45x45", 4 * 0.045,
                        "50x50", 4 * 0.05,
                        "56x56", 4 * 0.056,
                        "63x63", 4 * 0.063,
                        "70x70", 4 * 0.07,
                        "75x75", 4 * 0.075,
                        "80x80", 4 * 0.08,
                        "90x90", 4 * 0.09,
                        "100x100", 4 * 0.1,
                        "110x110", 4 * 0.11,
                        "125x125", 4 * 0.125,
                        "140x140", 4 * 0.14,
                        "160x160", 4 * 0.16,
                        "180x180", 4 * 0.18,
                        "200x200", 4 * 0.2,
                        "220x220", 4 * 0.22,
                        "250x250", 4 * 0.25],
      "Неравнополочный", ["25x16", 2 * 0.025 * 0.016,
                          "30x20", 2 * 0.03 * 0.02,
                          "32x20", 2 * 0.032 * 0.02,
                          "40x25", 2 * 0.04 * 0.025,
                          "40x30", 2 * 0.04 * 0.03,
                          "45x28", 2 * 0.045 * 0.028,
                          "50x32", 2 * 0.05 * 0.032,
                          "56x36", 2 * 0.056 * 0.036,
                          "63x40", 2 * 0.063 * 0.04,
                          "65x50", 2 * 0.065 * 0.05,
                          "70x45", 2 * 0.07 * 0.045,
                          "75x50", 2 * 0.075 * 0.05,
                          "80x50", 2 * 0.08 * 0.05,
                          "80x60", 2 * 0.08 * 0.06,
                          "90x56", 2 * 0.09 * 0.056,
                          "100x63", 2 * 0.1 * 0.063,
                          "100x65", 2 * 0.1 * 0.065,
                          "110x70", 2 * 0.11 * 0.07,
                          "125x80", 2 * 0.125 * 0.08,
                          "140x90", 2 * 0.14 * 0.09,
                          "160x100", 2 * 0.16 * 0.1,
                          "180x110", 2 * 0.18 * 0.11,
                          "200x125", 2 * 0.2 * 0.125]
      ]

# Швеллер
sh = ["У", ["5", 0.209,
            "6,5", 0.255,
            "8", 0.300,
            "10", 0.362,
            "12", 0.424,
            "14", 0.487,
            "16", 0.549,
            "16a", 0.565,
            "18", 0.612,
            "18a", 0.627,
            "20", 0.674,
            "22", 0.737,
            "24", 0.807,
            "27", 0.885,
            "30", 0.962,
            "33", 1.040,
            "36", 1.117,
            "40", 1.214],
      "П", ["5", 0.211,
            "6,5", 0.257,
            "8", 0.302,
            "10", 0.366,
            "12", 0.428,
            "14", 0.491,
            "16", 0.554,
            "16a", 0.570,
            "18", 0.618,
            "18a", 0.634,
            "20", 0.681,
            "22", 0.743,
            "24", 0.815,
            "27", 0.893,
            "30", 0.971,
            "33", 1.048,
            "36", 1.126,
            "40", 1.223],
      "Э", ["5", 0.212,
            "6,5", 0.258,
            "8", 0.303,
            "10", 0.365,
            "12", 0.428,
            "14", 0.492,
            "16", 0.554,
            "18", 0.618,
            "20", 0.680,
            "22", 0.743,
            "24", 0.815,
            "27", 0.893,
            "30", 0.972,
            "33", 1.051,
            "36", 1.128,
            "40", 1.226],
      "Л", ["12", 0.348,
            "14", 0.396,
            "16", 0.446,
            "18", 0.506,
            "20", 0.565,
            "22", 0.623,
            "24", 0.683,
            "27", 0.762,
            "30", 0.841],
      "С", ["8", 0.317,
            "14", 0.483,
            "16", 0.540,
            "18", 0.598,
            "20", 0.654,
            "24", 0.776,
            "26", 0.739,
            "30", 0.896],
      "Са", ["14", 0.484,
             "16", 0.544,
             "18", 0.602,
             "20", 0.658,
             "26", 0.832,
             "30", 0.900],
      "Сб", ["18", 0.722,
             "20", 0.761,
             "30", 0.904]
      ]

# Двутавр
dv = ["Б", ["10-Б1", 0.400,
            "12-Б1", 0.472,
            "12-Б2", 0.475,
            "14-Б1", 0.547,
            "14-Б2", 0.551,
            "16-Б1", 0.619,
            "16-Б2", 0.623,
            "18-Б1", 0.694,
            "18-Б2", 0.698,
            "20-Б1", 0.770,
            "20-Б2", 0.778,
            "20-Б3", 0.789,
            "25-Б1", 0.961,
            "25-Б2", 0.967,
            "25-Б3", 0.978,
            "25-Б4", 0.989,
            "30-Б1", 1.159,
            "30-Б2", 1.165,
            "30-Б3", 1.176,
            "30-Б4", 1.187,
            "35-Б1", 1.352,
            "35-Б2", 1.362,
            "35-Б3", 1.373,
            "35-Б4", 1.386,
            "40-Б1", 1.547,
            "40-Б2", 1.557,
            "40-Б3", 1.570,
            "40-Б4", 1.583,
            "45-Б1", 1.641,
            "45-Б2", 1.651,
            "45-Б3", 1.664,
            "45-Б4", 1.677,
            "50-Б1", 1.728,
            "50-Б2", 1.736,
            "50-Б3", 1.746,
            "50-Б4", 1.762,
            "50-Б5", 1.776,
            "55-Б1", 1.906,
            "55-Б2", 1.913,
            "55-Б3", 1.925,
            "55-Б4", 1.939,
            "60-Б1", 1.930,
            "60-Б2", 1.940,
            "60-Б3", 1.949,
            "60-Б4", 1.964,
            "70-Б1", 2.357,
            "70-Б2", 2.368,
            "70-Б3", 2.378,
            "70-Б4", 2.393],
      "Ш", ["20-Ш0", 0.944,
            "20-Ш1", 0.954,
            "20-Ш2", 0.965,
            "20-Ш3", 0.976,
            "20-Ш4", 0.998,
            "20-Ш5", 1.016,
            "20-Ш6", 1.038,
            "25-Ш0", 1.137,
            "25-Ш1", 1.147,
            "25-Ш2", 1.158,
            "25-Ш3", 1.172,
            "25-Ш4", 1.203,
            "25-Ш5", 1.225,
            "25-Ш6", 1.251,
            "30-Ш0", 1.331,
            "30-Ш1", 1.341,
            "30-Ш2", 1.355,
            "30-Ш3", 1.371,
            "30-Ш4", 1.395,
            "30-Ш5", 1.421,
            "30-Ш6", 1.453,
            "35-Ш1", 1.614,
            "35-Ш2", 1.628,
            "35-Ш3", 1.646,
            "35-Ш4", 1.664,
            "35-Ш5", 1.694,
            "35-Ш6", 1.720,
            "35-Ш7", 1.752,
            "40-Ш1", 1.905,
            "40-Ш2", 1.922,
            "40-Ш3", 1.940,
            "40-Ш4", 1.961,
            "40-Ш5", 1.999,
            "40-Ш6", 2.024,
            "40-Ш7", 2.056,
            "45-Ш0", 2.003,
            "45-Ш1", 2.017,
            "45-Ш2", 2.033,
            "45-Ш3", 2.049,
            "45-Ш4", 2.083,
            "45-Ш5", 2.109,
            "45-Ш6", 2.141,
            "50-Ш1", 2.097,
            "50-Ш2", 2.100,
            "50-Ш3", 2.110,
            "50-Ш4", 2.120,
            "50-Ш5", 2.141,
            "50-Ш6", 2.187,
            "50-Ш7", 2.215,
            "50-Ш8", 2.247,
            "60-Ш1", 2.292,
            "60-Ш2", 2.298,
            "60-Ш3", 2.310,
            "60-Ш4", 2.322,
            "60-Ш5", 2.346,
            "60-Ш6", 2.418,
            "60-Ш7", 2.446,
            "60-Ш8", 2.484,
            "70-Ш1", 2.510,
            "70-Ш2", 2.518,
            "70-Ш3", 2.530,
            "70-Ш4", 2.541,
            "70-Ш5", 2.556,
            "70-Ш6", 2.630,
            "70-Ш7", 2.664,
            "70-Ш8", 2.704,
            "80-Ш1", 2.688,
            "80-Ш2", 2.706,
            "90-Ш1", 2.875,
            "90-Ш2", 2.893,
            "100-Ш1", 3.170,
            "100-Ш2", 3.184,
            "100-Ш3", 3.197,
            "100-Ш4", 3.208],
      "К", ["15-К1", 0.859,
            "15-К2", 0.867,
            "15-К3", 0.878,
            "15-К4", 0.889,
            "15-К5", 0.901,
            "20-К1", 1.152,
            "20-К2", 1.162,
            "20-К3", 1.172,
            "20-К4", 1.181,
            "20-К5", 1.190,
            "20-К6", 1.198,
            "20-К7", 1.210,
            "20-К8", 1.222,
            "25-К1", 1.445,
            "25-К2", 1.455,
            "25-К3", 1.463,
            "25-К4", 1.473,
            "25-К5", 1.484,
            "25-К6", 1.491,
            "25-К7", 1.521,
            "25-К8", 1.535,
            "25-К9", 1.549,
            "25-К10", 1.567,
            "30-К1", 1.743,
            "30-К2", 1.749,
            "30-К3", 1.759,
            "30-К4", 1.759,
            "30-К5", 1.765,
            "30-К6", 1.775,
            "30-К7", 1.780,
            "30-К8", 2.000,
            "30-К9", 2.013,
            "30-К10", 2.025,
            "30-К11", 2.037,
            "30-К12", 2.051,
            "30-К13", 2.069,
            "30-К14", 2.111,
            "30-К15", 2.125,
            "30-К16", 2.143,
            "30-К17", 2.161,
            "30-К18", 2.183,
            "30-К19", 2.239,
            "30-К20", 2.267,
            "30-К21", 2.301,
            "35-К1", 2.022,
            "35-К1.5", 2.032,
            "35-К2", 2.042,
            "35-К3", 2.053,
            "35-К4", 2.064,
            "35-К5", 2.075,
            "35-К6", 2.108,
            "35-К7", 2.122,
            "35-К8", 2.134,
            "35-К9", 2.148,
            "35-К10", 2.161,
            "35-К11", 2.212,
            "35-К12", 2.230,
            "35-К13", 2.248,
            "35-К14", 2.266,
            "35-К15", 2.286,
            "35-К16", 2.358,
            "35-К17", 2.382,
            "35-К18", 2.408,
            "35-К19", 2.438,
            "35-К20", 2.512,
            "35-К21", 2.548,
            "35-К22", 2.588,
            "35-К23", 2.662,
            "35-К24", 2.710,
            "40-К1", 2.320,
            "40-К2", 2.336,
            "40-К3", 2.354,
            "40-К4", 2.374,
            "40-К4.5", 2.374,
            "40-К5", 2.374,
            "40-К6", 2.268,
            "40-К7", 2.286,
            "40-К8", 2.304,
            "40-К9", 2.324,
            "40-К10", 2.348,
            "40-К11", 2.432,
            "40-К12", 2.458,
            "40-К13", 2.488,
            "40-К14", 2.520,
            "40-К15", 2.600,
            "40-К16", 2.642,
            "40-К17", 2.642,
            "40-К18", 2.784,
            "40-К19", 2.846],
      "С", ["13-C1", 0.670,
            "20-C1", 1.170,
            "25-C1", 1.447,
            "25-C2", 1.465,
            "30-C1", 1.741,
            "30-C2", 1.759,
            "32-C1", 1.857,
            "32-C2", 1.892,
            "35-C1", 2.020,
            "35-C2", 2.038,
            "35-C3", 2.056,
            "40-C1", 2.316,
            "40-C2", 2.334,
            "40-C3", 2.352],
      "ДБ", ["20-ДБ1", 0.921,
             "20-ДБ2", 0.930,
             "25-ДБ1", 1.061,
             "25-ДБ2", 1.070,
             "25-ДБ3", 1.081,
             "25-ДБ4", 1.075,
             "25-ДБ5", 1.086,
             "25-ДБ6", 1.096,
             "30-ДБ1", 1.001,
             "30-ДБ2", 1.008,
             "30-ДБ3", 1.253,
             "30-ДБ4", 1.262,
             "30-ДБ5", 1.272,
             "30-ДБ6", 1.239,
             "30-ДБ7", 1.249,
             "30-ДБ8", 1.257,
             "35-ДБ1", 1.177,
             "35-ДБ2", 1.187,
             "35-ДБ3", 1.357,
             "35-ДБ4", 1.362,
             "35-ДБ5", 1.371,
             "35-ДБ6", 1.383,
             "35-ДБ7", 1.676,
             "35-ДБ8", 1.686,
             "35-ДБ9", 1.694,
             "35-ДБ10", 1.701,
             "40-ДБ1", 1.328,
             "40-ДБ2", 1.334,
             "40-ДБ3", 1.481,
             "40-ДБ4", 1.493,
             "40-ДБ5", 1.501,
             "40-ДБ6", 1.509,
             "40-ДБ7", 1.519,
             "45-ДБ1", 1.475,
             "45-ДБ2", 1.488,
             "45-ДБ3", 1.498,
             "45-ДБ4", 1.505,
             "45-ДБ5", 1.515,
             "45-ДБ6", 1.631,
             "45-ДБ7", 1.638,
             "45-ДБ8", 1.647,
             "45-ДБ9", 1.655,
             "45-ДБ10", 1.664,
             "45-ДБ11", 1.671,
             "53-ДБ1", 1.869,
             "53-ДБ2", 1.876,
             "53-ДБ3", 1.860,
             "53-ДБ4", 1.870,
             "53-ДБ5", 1.877,
             "53-ДБ6", 1.888,
             "53-ДБ7", 1.903,
             "60-ДБ1", 1.868,
             "60-ДБ2", 1, 878,
             "60-ДБ3", 2.075,
             "60-ДБ4", 2.084,
             "60-ДБ5", 2.094,
             "60-ДБ6", 2.106,
             "60-ДБ7", 2.104,
             "70-ДБ1", 2.349,
             "70-ДБ2", 2.355,
             "70-ДБ3", 2.354,
             "70-ДБ4", 2.362,
             "70-ДБ5", 2.355,
             "85-ДБ1", 2.818,
             "85-ДБ2", 2.816,
             "85-ДБ3", 2.822,
             "85-ДБ4", 2.826,
             "85-ДБ5", 2.817,
             "90-ДБ1", 3.000,
             "90-ДБ2", 3.001,
             "90-ДБ3", 3.005,
             "90-ДБ4", 3.009,
             "90-ДБ5", 3.013,
             "90-ДБ6", 3.017,
             "100-ДБ1", 3.117,
             "100-ДБ2", 3.117,
             "100-ДБ3", 3.117],
      "ДК", ["10-ДК0", 0.561,
             "10-ДК1", 0.561,
             "10-ДК2", 0.567,
             "10-ДК3", 0.619,
             "12-ДК0", 0.677,
             "12-ДК1", 0.677,
             "12-ДК2", 0.686,
             "12-ДК3", 0.738,
             "14-ДК0", 0.794,
             "14-ДК1", 0.794,
             "14-ДК2", 0.805,
             "14-ДК3", 0.853,
             "15-ДК1", 0.887,
             "15-ДК2", 0.900,
             "15-ДК3", 0.911,
             "16-ДК0", 0.906,
             "16-ДК1", 0.906,
             "16-ДК2", 0.918,
             "16-ДК3", 0.970,
             "18-ДК0", 1.024,
             "18-ДК1", 1.024,
             "18-ДК2", 1.038,
             "18-ДК3", 1.089,
             "20-ДК1", 1.186,
             "20-ДК2", 1.195,
             "20-ДК3", 1.204,
             "20-ДК4", 1.218,
             "20-ДК5", 1.236,
             "20-ДК6", 1.251,
             "25-ДК1", 1.483,
             "25-ДК2", 1.491,
             "25-ДК3", 1.501,
             "25-ДК4", 1.510,
             "25-ДК5", 1.515,
             "25-ДК6", 1.523,
             "25-ДК7", 1.532,
             "25-ДК8", 1.541]
      ]


def create_label():
    """Создаем неизменяемую шапку программы"""
    for i in range(len(positions)):
        tk.Label(frame,
                 text=positions[i],
                 font=font_arial,
                 bg='#a6a5a4',
                 fg='black',
                 width=10,
                 anchor="w",
                 bd=1,
                 relief=tk.RIDGE).grid(row=0,
                                       column=i + 1,
                                       sticky="nswe",
                                       padx=(5, 5),
                                       pady=(5, 5))
    w.grid_rowconfigure(0, minsize=35)


def create_combobox():
    """Создаем combobox cb1, cb2, cb3, а также окно для ввода значений м.п."""
    global number_position, cb1, cb2, cb3, count, enter_length, enter_elements, but_del_rem
    count += 1
    number_position = tk.Label(frame,
                               text=count,
                               font=font_arial,
                               width=4,
                               bg=color_1,
                               anchor="e")
    cb1 = ttk.Combobox(frame,
                       values=sort,
                       state="readonly",
                       width=16,
                       font=font_arial)
    cb2 = ttk.Combobox(frame,
                       values=dv[::2],
                       state="readonly",
                       width=18,
                       font=font_arial)

    cb3 = ttk.Combobox(frame,
                       values=dv[1][::2],
                       state="readonly",
                       width=11,
                       font=font_arial)
    enter_length = tk.Entry(frame,
                            width=30,
                            font=font_arial,
                            bd=2)
    enter_elements = tk.Entry(frame,
                              width=13,
                              font=font_arial,
                              bd=2)
    cb1.current(6)
    cb2.current(0)
    cb3.current(0)
    enter_length.insert(0, "1")
    enter_elements.insert(0, "1")
    number_position.grid(row=count, column=0)
    cb1.grid(row=count, column=1, sticky="nswe", padx=(5, 5), pady=(3, 3))
    cb2.grid(row=count, column=2, sticky="nswe", padx=(5, 5), pady=(3, 3))
    cb3.grid(row=count, column=3, sticky="nswe", padx=(5, 5), pady=(3, 3))
    enter_length.grid(row=count, column=4, sticky="nswe", padx=(5, 5), pady=(3, 3))
    enter_elements.grid(row=count, column=5, sticky="nswe", padx=(5, 5), pady=(3, 3))
    cb1.bind("<<ComboboxSelected>>", callback_cb1)
    cb2.bind("<<ComboboxSelected>>", callback_cb2)


def callback_cb1(event):
    """Отслеживает любое событие для cb1"""
    if event:
        change_positions_cb2()


def callback_cb2(event):
    """Отслеживает любое событие для cb2"""
    if event:
        change_positions_cb3()


def change_positions_cb2():
    global msg
    """Меняем позиции Combobox cb2 в зависимости от выбора cb1"""
    if cb1.get() == "Лист":
        cb2["values"] = ["---"]
        cb2.current(0)
        cb2["state"] = "disabled"
        cb3["values"] = ["---"]
        cb3.current(0)
        cb3["state"] = "disabled"
    elif cb1.get() == "Круг":
        cb3["state"] = "readonly"
        cb2["values"] = ["---"]
        cb2.current(0)
        cb2["state"] = "disabled"
        cb3["values"] = kr[::2]
        cb3.current(0)
    elif cb1.get() == "Квадрат":
        cb3["state"] = "readonly"
        cb2["values"] = ["---"]
        cb2.current(0)
        cb2["state"] = "disabled"
        cb3["values"] = kv[::2]
        cb3.current(0)
    elif cb1.get() == "Прямоугольник":
        cb3["state"] = "readonly"
        cb2["values"] = ["---"]
        cb2.current(0)
        cb2["state"] = "disabled"
        cb3["values"] = pr[::2]
        cb3.current(0)
    elif cb1.get() == "Уголок":
        cb2["state"] = "readonly"
        cb3["state"] = "readonly"
        cb2["values"] = ug[::2]
        cb2.current(0)
        cb3["values"] = ug[1][::2]
        cb3.current(0)
    elif cb1.get() == "Швеллер":
        cb2["state"] = "readonly"
        cb3["state"] = "readonly"
        cb2["values"] = sh[::2]
        cb2.current(0)
        cb3["values"] = sh[1][::2]
        cb3.current(0)
    elif cb1.get() == "Двутавр":
        cb2["state"] = "readonly"
        cb3["state"] = "readonly"
        cb2["values"] = dv[::2]
        cb2.current(0)
        cb3["values"] = dv[1][::2]
        cb3.current(0)


def change_positions_cb3():
    """Меняем позиции Combobox cb3 в зависимости от выбора cb2"""
    if cb1.get() == "Уголок":
        if cb2.get() == "Равнополочный":
            cb3["values"] = ug[1][::2]
            cb3.current(0)
        elif cb2.get() == "Неравнополочный":
            cb3["values"] = ug[3][::2]
            cb3.current(0)
    elif cb1.get() == "Швеллер":
        if cb2.get() == "У":
            cb3["values"] = sh[1][::2]
            cb3.current(0)
        elif cb2.get() == "П":
            cb3["values"] = sh[3][::2]
            cb3.current(0)
        elif cb2.get() == "Э":
            cb3["values"] = sh[5][::2]
            cb3.current(0)
        elif cb2.get() == "Л":
            cb3["values"] = sh[7][::2]
            cb3.current(0)
        elif cb2.get() == "С":
            cb3["values"] = sh[9][::2]
            cb3.current(0)
        elif cb2.get() == "Са":
            cb3["values"] = sh[11][::2]
            cb3.current(0)
        elif cb2.get() == "Сб":
            cb3["values"] = sh[13][::2]
            cb3.current(0)
    elif cb1.get() == "Двутавр":
        if cb2.get() == "Б":
            cb3["values"] = dv[1][::2]
            cb3.current(0)
        elif cb2.get() == "Ш":
            cb3["values"] = dv[3][::2]
            cb3.current(0)
        elif cb2.get() == "К":
            cb3["values"] = dv[5][::2]
            cb3.current(0)
        elif cb2.get() == "С":
            cb3["values"] = dv[7][::2]
            cb3.current(0)
        elif cb2.get() == "ДБ":
            cb3["values"] = dv[9][::2]
            cb3.current(0)
        elif cb2.get() == "ДК":
            cb3["values"] = dv[11][::2]
            cb3.current(0)


def create_button_add():
    """Создаем кнопку <Добавить позицию>"""
    global button_add
    button_add = tk.Button(frame,
                           text="Добавить позицию",
                           font=font_arial,
                           activebackground="#167822",
                           activeforeground="white",
                           fg="black",
                           bg="#15bc54",
                           bd=3,
                           command=add_new_branch)
    button_add.grid(row=count + 1, column=1)
    button_add.bind("<Enter>", cursor_on_button_add)
    button_add.bind("<Leave>", cursor_out_button_add)


def cursor_on_button_add(event):
    """Меняем цвет кнопки <Добавить позицию>, если курсор мыши наведен на виджет"""
    if event:
        button_add["bg"] = "#01fe17"
    else:
        button_add["bg"] = "#15bc54"


def cursor_out_button_add(event):
    """Меняем цвет кнопки <Посчитать>, если курсор мыши вне виджета"""
    if event:
        button_add["bg"] = "#15bc54"
    else:
        button_add["bg"] = "#01fe17"


def create_button_delete_remove():
    """Создаем кнопки <Удалить> и <Восстановить>"""
    global but_del_rem
    but_del_rem = tk.Button(frame,
                            text=f'Удалить {count}',
                            image=img_delete,
                            bd=0,
                            bg=color_1,
                            activebackground=color_1)
    but_del_rem.grid(row=count, column=6, padx=(10, 0))
    but_del_rem.bind("<Button-1>",
                     lambda event, but_del_rem=but_del_rem:
                     delete_remove(event, but_del_rem))
    ToolTip(but_del_rem, msg="Удалить позицию", delay=0.5)


def add_new_branch():
    """Нажатием на <Добавить позицию> создаем новый блок cb1, cb2, cb3, Entry
    Прежде, чем создать, удаляем все кнопки ниже, и вновь создаем их на 1 позицию ниже"""
    global squares
    if read_data_enter_length() and read_data_enter_elements() and count_max():
        if button_stop["state"] == "normal":
            massive.append(cb1.get())
            massive.append(cb2.get())
            massive.append(cb3.get())
            create_button_delete_remove()
        cb1["state"] = "disabled"
        cb2["state"] = "disabled"
        cb3["state"] = "disabled"
        enter_length["state"] = "disabled"
        enter_elements["state"] = "disabled"
        button_add.destroy()
        button_stop.destroy()
        output.destroy()
        create_combobox()
        create_button_add()
        create_button_stop()


def count_max():
    """Задаем максимальное количество строк в окне = не более 25 шт."""
    try:
        if count >= 25:
            raise ValueError()
        else:
            return 1
    except:
        mb.showerror(title='Внимание!', message='Превышено максимальное количество позиций в программе. '
                                                'Пожалуйста, создайте новый расчет или зайдите заново.')


def create_button_stop():
    """Создаем кнопку <<Посчитать>>"""
    global button_stop
    button_stop = tk.Button(frame,
                            text="Посчитать",
                            font=font_arial,
                            activebackground="#a51d17",
                            activeforeground="white",
                            fg="black",
                            bg="#ff0600",
                            width=11,
                            bd=3,
                            command=last_elem_massive)
    button_stop.grid(row=count + 1, column=2, sticky="nswe", padx=(5, 5), pady=(3, 3))
    button_stop.bind("<Enter>", cursor_on_button_stop)
    button_stop.bind("<Leave>", cursor_out_button_stop)
    counter()


def cursor_on_button_stop(event):
    """Меняем цвет кнопки <Посчитать>, если курсор мыши наведен на виджет"""
    if event:
        button_stop["bg"] = "#fcf301"
    else:
        button_stop["bg"] = "#ff0600"


def cursor_out_button_stop(event):
    """Меняем цвет кнопки <Посчитать>, если курсор мыши вне виджета"""
    if event:
        button_stop["bg"] = "#ff0600"
    else:
        button_stop["bg"] = "#fcf301"


def last_elem_massive():
    """Блокируем cb1, cb2, cb3, добавляем в массив последние элементы,
    блокируем кнопку <Закончить>, разблокируем кнопку <Посчитать>"""
    if read_data_enter_length() and read_data_enter_elements():
        cb1["state"] = "disabled"
        cb2["state"] = "disabled"
        cb3["state"] = "disabled"
        enter_length["state"] = "disabled"
        enter_elements["state"] = "disabled"
        massive.append(cb1.get())
        massive.append(cb2.get())
        massive.append(cb3.get())
        button_stop["state"] = "disabled"
        output.destroy()
        create_button_delete_remove()
        counter()


def counter():
    """Подсчет суммы"""
    global output, sum_end, val, squares
    sum_end = 0
    squares = []
    val = tk.StringVar()
    output = tk.Entry(frame,
                      textvariable=val,
                      width=11,
                      font=font_arial,
                      bd=2,
                      bg='#e1eda7')
    output.grid(row=count + 1, column=5, sticky="nswe", padx=(5, 5), pady=(3, 3))

    def counter_sum(var, sum):
        """Считаем итоговую сумму каждой строки"""
        global squares
        for i in range(len(var)):
            if massive[(a * 5) + 3] == var[i]:
                for j in range(len(var[i + 1])):
                    if massive[(a * 5) + 4] == var[i + 1][j]:
                        sum = var[i + 1][j + 1] * float(massive[a * 5]) * int(massive[(a * 5) + 1])

            elif massive[(a * 5) + 3] == "---":
                for j in range(len(var[::2])):
                    if massive[(a * 5) + 4] == var[j]:
                        sum = var[j + 1] * float(massive[a * 5]) * int(massive[(a * 5) + 1])

        return sum

    k = int(len(massive) / 5)
    for a in range(k):
        if massive[(a * 5) + 2] == "Лист":
            count_list = float(massive[a * 5]) * int(massive[(a * 5) + 1])
            sum_end += count_list
            squares.append(round(count_list, 2))
        elif massive[(a * 5) + 2] == "Круг":
            value = kr
            z = counter_sum(value, sum_end)
            sum_end += z
            squares.append(round(z, 2))
        elif massive[(a * 5) + 2] == "Квадрат":
            value = kv
            z = counter_sum(value, sum_end)
            sum_end += z
            squares.append(round(z, 2))
        elif massive[(a * 5) + 2] == "Прямоугольник":
            value = pr
            z = counter_sum(value, sum_end)
            sum_end += z
            squares.append(round(z, 2))
        elif massive[(a * 5) + 2] == "Уголок":
            value = ug
            z = counter_sum(value, sum_end)
            sum_end += z
            squares.append(round(z, 2))
        elif massive[(a * 5) + 2] == "Швеллер":
            value = sh
            z = counter_sum(value, sum_end)
            sum_end += z
            squares.append(round(z, 2))
        elif massive[(a * 5) + 2] == "Двутавр":
            value = dv
            z = counter_sum(value, sum_end)
            sum_end += z
            squares.append(round(z, 2))

    end = round(sum_end, 2)
    # ВОТ ОНА, ИТОГОВАЯ СУММА!
    val.set(str(end) + " м\u00B2")


def read_data_enter_length():
    """Проверяем <enter_length> на то, что введено положительное число или набор чисел"""
    try:
        value = enter_length.get()
        list = re.split(regexPattern, value)
        if cb1.get() == "Лист":
            metal_sheet.append(value)
            sum = 2 * (float(list[0]) * float(list[1])
                       + float(list[0]) * float(list[2])
                       + float(list[1]) * float(list[2]))
        else:
            for i in range(len(list)):
                value = list[i].replace(",", ".")
                value = value.replace(' ', '')
                list[i] = value
            sum = 0
            for i in range(len(list)):
                sum += float(list[i])
        if sum <= 0:
            raise ValueError()
        else:
            if enter_length["state"] == "normal":
                massive.append(sum)
                massive_value.append(sum)
    except:
        mb.showerror(title='Ошибка', message='Введите положительное число или список чисел, '
                                             'либо проверьте правильность введенных данных')
    else:
        return 1


def read_data_enter_elements():
    """Проверяем <enter_elements> на то, что введено целое положительное число"""
    try:
        value = enter_elements.get()
        if int(value) > 0:
            if enter_elements["state"] == "normal":
                massive.append(value)
                massive_value.append(value)
        else:
            raise ValueError()
    except:
        mb.showerror(title='Ошибка', message='Введите целое положительное число!')
    else:
        return 1


def delete_remove(event, button):
    """Заменяем кнопку <Удалить> на <Восстановить> и наоборот, считываем позицию кнопки через 'text'"""
    for i in range(25):
        if button["text"] == f'Удалить {i}':
            button["text"] = f'Восстановить {i}'
            massive[(5 * i) - 5] = 0
            massive[(5 * i) - 4] = 0
            button["image"] = img_remove
            ToolTip(button, msg="Вернуть позицию", delay=0.5)
        elif button["text"] == f'Восстановить {i}':
            button["text"] = f'Удалить {i}'
            massive[(5 * i) - 5] = massive_value[(2 * i) - 2]
            massive[(5 * i) - 4] = massive_value[(2 * i) - 1]
            button["image"] = img_delete
            ToolTip(button, msg="Удалить позицию", delay=0.5)
    counter()


create_frame()
create_label()
create_combobox()
create_button_add()
create_button_stop()

w.protocol("WM_DELETE_WINDOW", closing)

w.mainloop()
